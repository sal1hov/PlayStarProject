import logging
import random
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes
)
from django.conf import settings
from asgiref.sync import sync_to_async
from accounts.models import SocialAccount
from django.utils import timezone
from datetime import timedelta

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        if not user:
            raise ValueError("User not found in update")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
        code = ''.join([str(random.randint(0, 9)) for _ in range(6)])
        expires_at = timezone.now() + timedelta(minutes=5)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ pending-–∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await sync_to_async(SocialAccount.objects.filter(
            provider='telegram_pending',
            uid=f"temp_{user.id}"
        ).delete)()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        account = await sync_to_async(SocialAccount.objects.create)(
            provider='telegram_pending',
            uid=f"temp_{user.id}",
            user=None,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º NULL
            extra_data={
                'code': code,
                'telegram_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'expires_at': expires_at.isoformat()
            }
        )

        await update.message.reply_text(
            f"üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{code}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ PlayStar –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
            "–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}", exc_info=True)
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def setup_bot():
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_error_handler(error_handler)
    return application