import logging
import random
from datetime import timedelta

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from django.conf import settings
from asgiref.sync import sync_to_async
from accounts.models import SocialAccount
from django.utils import timezone

logger = logging.getLogger(__name__)


def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = setup_bot()
    application.run_polling()


if __name__ == '__main__':
    run_bot()


def check_settings():
    required_settings = ['TELEGRAM_BOT_TOKEN']
    for setting in required_settings:
        if not getattr(settings, setting, None):
            raise ValueError(f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å {setting} –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Django")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ PlayStar.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/login - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É\n"
            "/bind - –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞")

        code = ''.join([str(random.randint(0, 9)) for _ in range(6)])

        await sync_to_async(
            SocialAccount.objects.filter(
                provider='telegram_pending',
                uid=f"telegram_{user.id}"
            ).delete,
            thread_sensitive=True
        )()

        await sync_to_async(SocialAccount.create_pending_telegram_account, thread_sensitive=True)(
            telegram_id=user.id,
            code=code,
            purpose='login'
        )

        await update.message.reply_text(
            f"üîê –í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞: <b>{code}</b>\n\n"
            f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {(timezone.now() + timedelta(minutes=5)).strftime('%H:%M')}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ñ–æ—Ä–º–µ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
            "‚ö†Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!",
            parse_mode='HTML'
        )
        logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –≤—Ö–æ–¥–∞")
    except Exception as e:
        logger.error(f"Error in login command: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def bind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏")

        code = ''.join([str(random.randint(0, 9)) for _ in range(6)])
        expires_at = timezone.now() + timedelta(minutes=5)

        await sync_to_async(
            SocialAccount.objects.filter(
                provider='telegram_pending',
                uid=f"telegram_{user.id}"
            ).delete,
            thread_sensitive=True
        )()

        await sync_to_async(SocialAccount.objects.create, thread_sensitive=True)(
            provider='telegram_pending',
            uid=f"telegram_{user.id}",
            extra_data={
                'code': code,
                'telegram_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'expires_at': expires_at.isoformat(),
                'purpose': 'bind'
            }
        )

        await update.message.reply_text(
            f"üîê –ö–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏: <b>{code}</b>\n\n"
            f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expires_at.strftime('%H:%M')}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.",
            parse_mode='HTML'
        )
        logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏")
    except Exception as e:
        logger.error(f"Error in bind command: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Bot error: {context.error}", exc_info=True)
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def setup_bot():
    check_settings()

    application = ApplicationBuilder().token(settings.TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("login", login_command))
    application.add_handler(CommandHandler("bind", bind_command))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))

    application.add_error_handler(error_handler)

    return application